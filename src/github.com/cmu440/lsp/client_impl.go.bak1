// Contains the implementation of a LSP client.

package lsp

import (
	"container/list"
	"encoding/json"
	"errors"
	"time"
	"github.com/cmu440/lspnet"
)

type client struct {
	connId    int             // connection id
	hostport  string          // server address
	conn      *lspnet.UDPConn // udp connection
	active    bool
	readPend  bool
	allClean  bool
	closePend bool

	// epoch handler config
	epochLimit  int
	epochMillis int
	windowSize  int
	epochCount  int

	epochCountMutex chan struct{} // protect epoch count

	// sender part
	sendAckNext   int              // first sent packet not acknowledged
	sendDataNext  int              // next sequence number to be sent
	sendDataCache map[int]*Message // cached for sent packets
	sendAckCache  map[int]bool     // cache unorder packet

	// receiver part
	receiveDataNext  int              // next needed data packet
	receiveRecent    *list.List       // recently received packets
	receiveDataCache map[int]*Message // cache for unordered data packets

	// channel
	connChan chan int      // notify connection
	msgChan  chan *Message // transfer message to processor
	epochSig chan struct{} // notify epoch event
	shutdown chan struct{} // notify the components of current client

	epochOutOfLimit chan struct{} // epoch limit reached, die

	writeRequest chan []byte
	writeReply   chan bool
	readRequest  chan struct{}
	readReply    chan readResult
	closeRequest chan struct{}
	closeReply   chan bool

	writeList *list.List // messages to be written
	readList  *list.List // messages to be read
}

type readResult struct {
	succ bool
	data []byte
}

// NewClient creates, initiates, and returns a new client. This function
// should return after a connection with the server has been established
// (i.e., the client has received an Ack message from the server in response
// to its connection request), and should return a non-nil error if a
// connection could not be made (i.e., if after K epochs, the client still
// hasn't received an Ack message from the server in response to its K
// connection requests).
//
// hostport is a colon-separated string identifying the server's host address
// and port number (i.e., "localhost:9999").
func NewClient(hostport string, params *Params) (res Client, err error) {
	cli := client{
		connId:           0,
		hostport:         hostport,
		conn:             nil,
		active:           false,
		allClean:         false,
		readPend:         false,
		closePend:        false,
		epochCount:       0,
		epochLimit:       params.EpochLimit,
		epochMillis:      params.EpochMillis,
		windowSize:       params.WindowSize,
		connChan:         make(chan int),
		msgChan:          make(chan *Message),
		epochCountMutex:  make(chan struct{}, 1),
		epochSig:         make(chan struct{}),
		sendAckNext:      0,
		sendDataNext:     1,
		receiveDataNext:  1,
		sendDataCache:    make(map[int]*Message),
		sendAckCache:     make(map[int]bool),
		receiveRecent:    list.New(),
		receiveDataCache: make(map[int]*Message),
		epochOutOfLimit:  make(chan struct{}),
		shutdown:         make(chan struct{}),

		writeRequest: make(chan []byte),
		writeReply:   make(chan bool),
		readRequest:  make(chan struct{}),
		readReply:    make(chan readResult),
		closeRequest: make(chan struct{}),
		closeReply:   make(chan bool),

		writeList: list.New(),
		readList:  list.New(),
	}

	res = &cli
	cli.epochCountMutex <- struct{}{}
	cli.active = true
	go (&cli).run()
	select {
	// monitor connection status
	case _, ok := <-cli.connChan:
		if !ok {
			res = nil
			err = errors.New("can not connect to server")
		}
	case <-cli.shutdown:
		return
	}
	return
}

// send connection request and start epoch handler
func (c *client) run() {
	addr, err := lspnet.ResolveUDPAddr("udp", c.hostport)
	if err != nil {
		close(c.connChan)
		return
	}

	conn, err := lspnet.DialUDP("udp", nil, addr)
	if err != nil {
		LOGE.Println(err)
		close(c.connChan)
		return
	}

	c.conn = conn

	connMsg := NewConnect()
	c.sendDataCache[0] = connMsg
	msg, err := json.Marshal(connMsg)
	if err != nil {
		LOGE.Println(err)
	}
	_, err = c.conn.Write(msg)
	if err != nil {
		LOGE.Println(err)
	}

	go c.packetReceiver()
	go c.packetProcessor()
	go c.epochHandler()
}

// receive packets and hand to Processor
func (c *client) packetReceiver() {
	// receive packets
	var bytes [messageMax]byte
	for {
		n, err := c.conn.Read(bytes[:])
		if err != nil {
			LOGE.Println(err)
			continue
		}
		// successful
		var msg Message
		json.Unmarshal(bytes[:n], &msg)
		c.msgChan <- &msg
	}
}

// manage received packets
func (c *client) packetProcessor() {
	for {
		select {
		case msg := <-c.msgChan:
			<-c.epochCountMutex
			c.epochCount = 0
			c.epochCountMutex <- struct{}{}
			if !c.active && c.allClean {
				close(c.shutdown)
				c.closeReply <- true
				return
			}
			LOGV.Println(c.connId, " receive packet ", msg)
			switch msg.Type {
			case MsgAck:
				c.processSendAck(msg)
				if c.allClean && c.closePend {
					close(c.shutdown)
					c.closeReply <- true
					return
				}
			case MsgData: // receive data from server
				c.processRecData(msg)
			case MsgConnect: // should never be here
				LOGE.Println("Connection request to client!!")
			}
		case <-c.epochSig:
			c.processEpoch()
			if c.allClean {
				close(c.shutdown)
				c.closeReply <- true
				return
			}
		case payload := <-c.writeRequest:
			// TODO: check connection status here
			c.writeList.PushBack(payload)
			c.processWrite()
			c.writeReply <- true
			if c.allClean {
				close(c.shutdown)
				return
			}
		case <-c.readRequest:
			c.readPend = true
			c.processRead()
		case <-c.closeRequest:
			LOGV.Println("Client Close()")
			// check if closed
			if !c.active && c.allClean {
				// has lost connection
				c.closeReply <- false
			}
			c.active = false
			c.closePend = true
			if c.allClean {
				close(c.shutdown)
				c.closeReply <- true
				return
			}
		case <-c.epochOutOfLimit:
			if c.active {
				LOGV.Println("Epoch limit reached")
				c.active = false
				c.allClean = true
				// unlock some blocking Read()
				c.processRead()
				close(c.shutdown)
				return
			} else {
				c.allClean = true
				if c.closePend {
					if c.readPend {
						c.readReply <- readResult{false, nil}
					}
					LOGV.Println(c.connId, " close after epoch")
					close(c.shutdown)
					c.closeReply <- false
					return
				}
				LOGV.Println("Ignore duplicate epoch limit outreach")
			}
		}
	}
}

func (c *client) processRead() {
	if c.readPend {
		LOGV.Println("Process read()")
		if !c.active {
			LOGV.Println(c.connId, " is dead")
			c.readReply <- readResult{false, nil}
		} else if c.readList.Len() > 0 {
			p := c.readList.Front().Value.([]byte)
			c.readList.Remove(c.readList.Front())
			c.readReply <- readResult{true, p}
			c.readPend = false
		} else {
			LOGV.Println("Read list is empty!!")
		}
	}
}

// ack for sent packets
func (c *client) processSendAck(msg *Message) {
	switch {
	case msg.SeqNum == c.sendAckNext:
		if c.sendAckNext == 0 {
			c.connId = msg.ConnID
			c.connChan <- 1 // notify NewClient()
			LOGV.Println("Confirm connection")
		}
		LOGV.Println(msg.ConnID, " get ", msg)
		delete(c.sendAckCache, c.sendAckNext)
		c.sendAckNext++
		_, ok := c.sendAckCache[c.sendAckNext]
		for ok {
			delete(c.sendAckCache, c.sendAckNext)
			c.sendAckNext++
			_, ok = c.sendAckCache[c.sendAckNext]
		}
		c.processWrite()
	case msg.SeqNum > c.sendAckNext:
		c.sendAckCache[msg.SeqNum] = true
		delete(c.sendDataCache, msg.SeqNum)
	default: // do nothing
	}
}

// receive data packets from server
func (c *client) processRecData(msg *Message) {
	LOGV.Println("Client receive ", msg)
	if msg.SeqNum >= c.receiveDataNext {
		if msg.SeqNum == c.receiveDataNext {
			// update counter
			ok := true
			c.receiveDataCache[c.receiveDataNext] = msg
			for ok {
				c.readList.PushBack(c.receiveDataCache[c.receiveDataNext].Payload)
				delete(c.receiveDataCache, c.receiveDataNext)
				ack := NewAck(c.connId, c.receiveDataNext)
				clientWrite(c.conn, ack)
				c.receiveDataNext++
				_, ok = c.receiveDataCache[c.receiveDataNext]
			}
			c.processRead() // we may have new data for pending Read()
		} else {
			// cache
			c.receiveDataCache[msg.SeqNum] = msg
			ack := NewAck(c.connId, msg.SeqNum)
			clientWrite(c.conn, ack)
		}
		// update recently received data message
		dup := false
		mSn := c.receiveRecent.Front()
		for curr := c.receiveRecent.Front(); curr != nil; curr = curr.Next() {
			m := curr.Value.(*Message)
			if m.SeqNum < mSn.Value.(*Message).SeqNum {
				mSn = curr
			}

			if m.SeqNum == msg.SeqNum {
				dup = true
				break
			}
		}
		if !dup {
			if c.receiveRecent.Len() < c.windowSize {
				c.receiveRecent.PushBack(msg)
			} else if mSn.Value.(*Message).SeqNum != msg.SeqNum {
				c.receiveRecent.PushBack(msg)
				c.receiveRecent.Remove(mSn)
			}

		}

	}
}

func (c *client) processEpoch() {
	// no connection ack
	if c.sendAckNext == 0 {
		LOGV.Println("Try reconnect")
		connMsg := NewConnect()
		clientWrite(c.conn, connMsg)
	}

	if c.receiveDataNext == 1 {
		// receive no data
		ack := NewAck(c.connId, 0)
		clientWrite(c.conn, ack)
	}

	// for sending
	//LOGV.Println(c.connId, " ", c.sendDataCache)
	// resend unacked packets
	for sn := c.sendAckNext; sn < c.sendAckNext+c.windowSize; sn++ {
		// check whether we have data cached
		msg, ok := c.sendDataCache[sn]
		if ok {
			LOGV.Println("Resending ", msg)
			clientWrite(c.conn, msg)
		}
	}

	// for receiving
	s := ""
	for curr := c.receiveRecent.Front(); curr != nil; curr = curr.Next() {
		s += " " + curr.Value.(*Message).String()
	}
	LOGV.Println(c.connId, " Client recent : "+s)
	// resend ack for recently received message
	for curr := c.receiveRecent.Front(); curr != nil; curr = curr.Next() {
		m := curr.Value.(*Message)
		ack := NewAck(c.connId, m.SeqNum)
		LOGV.Println("Client reACK ", ack)
		clientWrite(c.conn, ack)
	}
	c.processWrite() // write potential message
}

func (c *client) processWrite() {
	for c.sendDataNext < c.sendAckNext+c.windowSize {
		if c.writeList.Len() > 0 {
			payload := c.writeList.Front().Value.([]byte)
			msg := NewData(c.connId, c.sendDataNext, payload)
			c.sendDataCache[c.sendDataNext] = msg
			clientWrite(c.conn, msg)
			c.sendDataNext++
			c.writeList.Remove(c.writeList.Front())
		} else {
			if !c.active && c.writeList.Len() == 0 && c.sendAckNext == c.sendDataNext {
				LOGV.Println(c.connId, " clean at ", c.sendAckNext)
				c.allClean = true
			}
			return
		}
	}
	if !c.active && c.writeList.Len() == 0 && c.sendAckNext == c.sendDataNext {
		LOGV.Println(c.connId, " clean at ", c.sendAckNext)
		c.allClean = true
	}
	return
}

func clientWrite(conn *lspnet.UDPConn, rMsg *Message) {
	msg, err := json.Marshal(rMsg)
	if err != nil {
		LOGE.Println(err)
	}
	conn.Write(msg)
}

// invoke periodically, deal with potential deadlock
func (c *client) epochHandler() {
	for {
		select {
		case <-time.After(time.Duration(c.epochMillis) * time.Millisecond):
			// no connection ack
			c.epochSig <- struct{}{}

			<-c.epochCountMutex
			c.epochCount++
			c.epochCountMutex <- struct{}{}

			if c.epochCount > c.epochLimit {
				c.epochOutOfLimit <- struct{}{}
			}
		case <-c.shutdown:
			return
		}
	}
}

func (c *client) ConnID() int {
	return c.connId
}

func (c *client) Read() (res []byte, e error) {
	LOGV.Println("client read()   [")
	defer LOGV.Println("client read()   ]")
	c.readRequest <- struct{}{}
	result := <-c.readReply
	if !result.succ {
		e = errors.New("Client read: connection failed")
		return
	}
	res = result.data
	LOGV.Println("client read() end")
	return
}

func (c *client) Write(payload []byte) (e error) {
	// check connection
	c.writeRequest <- payload
	ok := <-c.writeReply
	if !ok {
		e = errors.New("Write: connection to server died")
	}
	return
}

func (c *client) Close() (e error) {
	LOGV.Println(c.connId, " Close() called @@@@@@@@@@@@@@@@@@@@@@@")
	defer LOGV.Println(c.connId, " Close() end @@@@@@@@@@@@@@@@@@@@")
	c.closeRequest <- struct{}{}
	ok := <-c.closeReply
	if !ok {
		e = errors.New("Client: connection has been already closed")
	}
	return
}
